from scipy.integrate import odeint
import scipy as sp
from leer_eof import leer_eof
from numpy import *
from sys import argv
#Ignorar deprecration warnings
import warnings
warnings.filterwarnings("ignore")

#leer E0F otorgado
fname = argv[1]
t, x, y, z, vx, vy, vz = leer_eof(fname)

z0 = [ x[0], y[0], z[0], vx[0], vy[0], vz[0] ] #Vector inicial real
vf_real = [ x[-1], y[-1], z[-1] ]   #Vector final real
dT = t[-1]  #delta tiempo

#-------   DATOS   -------

#G = 6.67*(10**(-11))  #[kg-1 m3 s-2]
#mt = 5.9722*(10**24)  #Masa tierra [kg]
omega = 7.27*(10**(-5)) #[rad/s]
mu = 398600.4415*(10.**9)
r = 6378136.3 #radio tierra [m]

                            #--- Modelo_jgm3_8terminos (archivo.py dado para incorporarlo) ---
Nt = 8

C = zeros((Nt+1,Nt+1))
S = zeros((Nt+1,Nt+1))

#--- Terminos zonales  ("Jn"), son los C[n,0], notar que S[n,0] = 0 ---

# n,m     n m       Jn
C[2,0], S[2,0] =   -0.10826360229840E-02   ,     0.0
C[3,0], S[3,0] =    0.25324353457544E-05   ,     0.0
C[4,0], S[4,0] =    0.16193312050719E-05   ,     0.0
C[5,0], S[5,0] =    0.22771610163688E-06   ,     0.0
C[6,0], S[6,0] =   -0.53964849049834E-06   ,     0.0
C[7,0], S[7,0] =    0.35136844210318E-06   ,     0.0
C[8,0], S[8,0] =    0.20251871520885E-06   ,     0.0

#Terminos teserales Cmn y Smn
# n,m     n m       Cmn                          Smn
C[2,1], S[2,1] =   -0.24140000522221E-09   ,     0.15430999737844E-08
C[3,1], S[3,1] =    0.21927988018965E-05   ,     0.26801189379726E-06
C[4,1], S[4,1] =   -0.50872530365024E-06   ,    -0.44945993508117E-06
C[5,1], S[5,1] =   -0.53716510187662E-07   ,    -0.80663463828530E-07
C[6,1], S[6,1] =   -0.59877976856303E-07   ,     0.21164664354382E-07
C[7,1], S[7,1] =    0.20514872797672E-06   ,     0.69369893525908E-07
C[8,1], S[8,1] =    0.16034587141379E-07   ,     0.40199781599510E-07
C[2,2], S[2,2] =    0.15745360427672E-05   ,    -0.90386807301869E-06
C[3,2], S[3,2] =    0.30901604455583E-06   ,    -0.21140239785975E-06
C[4,2], S[4,2] =    0.78412230752366E-07   ,     0.14815545694714E-06
C[5,2], S[5,2] =    0.10559053538674E-06   ,    -0.52326723987632E-07
C[6,2], S[6,2] =    0.60120988437373E-08   ,    -0.46503948132217E-07
C[7,2], S[7,2] =    0.32844904836492E-07   ,     0.92823143885084E-08
C[8,2], S[8,2] =    0.65765423316743E-08   ,     0.53813164055056E-08
C[3,3], S[3,3] =    0.10055885741455E-06   ,     0.19720132389889E-06
C[4,3], S[4,3] =    0.59215743214072E-07   ,    -0.12011291831397E-07
C[5,3], S[5,3] =   -0.14926153867389E-07   ,    -0.71008771406986E-08
C[6,3], S[6,3] =    0.11822664115915E-08   ,     0.18431336880625E-09
C[7,3], S[7,3] =    0.35285405191512E-08   ,    -0.30611502382788E-08
C[8,3], S[8,3] =   -0.19463581555399E-09   ,    -0.87235195047605E-09
C[4,4], S[4,4] =   -0.39823957404129E-08   ,     0.65256058113396E-08
C[5,4], S[5,4] =   -0.22979123502681E-08   ,     0.38730050770804E-09
C[6,4], S[6,4] =   -0.32641389117891E-09   ,    -0.17844913348882E-08
C[7,4], S[7,4] =   -0.58511949148624E-09   ,    -0.26361822157867E-09
C[8,4], S[8,4] =   -0.31893580211856E-09   ,     0.91177355887255E-10
C[5,5], S[5,5] =    0.43047675045029E-09   ,    -0.16482039468636E-08
C[6,5], S[6,5] =   -0.21557711513900E-09   ,    -0.43291816989540E-09
C[7,5], S[7,5] =    0.58184856030873E-12   ,     0.63972526639235E-11
C[8,5], S[8,5] =   -0.46151734306628E-11   ,     0.16125208346784E-10
C[6,6], S[6,6] =    0.22136925556741E-11   ,    -0.55277122205966E-10
C[7,6], S[7,6] =   -0.24907176820596E-10   ,     0.10534878629266E-10
C[8,6], S[8,6] =   -0.18393642697634E-11   ,     0.86277431674150E-11
C[7,7], S[7,7] =    0.25590780149873E-13   ,     0.44759834144751E-12
C[8,7], S[8,7] =    0.34297618184624E-12   ,     0.38147656686685E-12
C[8,8], S[8,8] =   -0.15803322891725E-12   ,     0.15353381397148E-12

                # --- Términos J y su vector para operarlos, aplicando mejor de términos Teserales ----

J2,J3,J4,J5,J6,J7,J8 = [-C[2,0]*mu*r**2, -C[3,0]*mu*r**3, -C[4,0]*mu*r**4, -C[5,0]*mu*r**5, -C[6,0]*mu*r**6, -C[7,0]*mu*r**7, -C[8,0]*mu*r**8]
J2V,J3V,J4V,J5V,J6V,J7V,J8V = [sp.zeros(3), sp.zeros(3), sp.zeros(3), sp.zeros(3), sp.zeros(3), sp.zeros(3), sp.zeros(3)]

def satelite(z, t):

    #se definieron más constantes para incluirlas después y minimizar el error por decimales
    zp = sp.zeros(6)
    zp[0:3] = z[3:6]
    z1 = z[0:3]
    z2 = z[3:6]
    coseno = sp.cos(omega*t)
    seno = sp.cos(omega*t)
    d = sp.sqrt(sp.dot(z1,z1))   #distancia satelite -> tierra

    R_ = sp.array([[coseno, -seno,    0],
                   [seno, coseno,     0],
                   [0,         0,     1]])

    R_p = sp.array([[-seno, -coseno,  0],
                   [coseno, -seno,    0],
                   [0,         0,     0]])*omega

    R_pp = sp.array([[-coseno, seno,    0],
                     [-seno, -coseno,   0],
                     [0,         0,     0]])*(omega**2)

    R_z = R_@z1

    #Agregando mejoras de los J definidos anteriormente, y utilizando resultados del archivo legendre_np proporcionado

    #J2
    J2V[0],J2V[1],J2V[2] = [(J2*R_z[0])*(6*R_z[2]**2-(3./2)*(R_z[0]**2+R_z[1]**2))/(d**7),(J2*R_z[1])*(6*R_z[2]**2-(3./2)*(R_z[0]**2+R_z[1]**2))/(d**7),(J2*R_z[2])*(3*R_z[2]**2-(7./2)*(R_z[0]**2+R_z[1]**2))/(d**7)]
    #J3
    J3V[0],J3V[1],J3V[2] = [J3*R_z[0]*R_z[2]*(10*R_z[2]**2-(15./2)*(R_z[0]**2+R_z[1]**2))/(d**9), J3*R_z[1]*R_z[2]*(10*R_z[2]**2-(15./2)*(R_z[0]**2+R_z[1]**2))/(d**9),J3*(4*R_z[2]**2*(R_z[2]**2-3*(R_z[0]**2+R_z[1]**2))+(3./2)*((R_z[0]**2+R_z[1]**2)**2))/(d**9)]
    #J4
    J4V[0],J4V[1],J4V[2] = [J4 * -5 * R_z[0] * (35 * R_z[2] ** 4 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) - 15 * R_z[2] ** 2 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2)) + 0.375) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2) + (-35 * R_z[0] * R_z[2] ** 4 / (2 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) + 15 * R_z[0] * R_z[2] ** 2 / (2 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2)) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2),
                            J4 * -5 * R_z[1] * (35 * R_z[2] ** 4 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) - 15 * R_z[2] ** 2 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2)) + 0.375) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2) + (-35 * R_z[1] * R_z[2] ** 4 / (2 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) + 15 * R_z[1] * R_z[2] ** 2 / (2 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2)) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2),
                            J4 * -5 * R_z[2] * (35 * R_z[2] ** 4 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) - 15 * R_z[2] ** 2 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2)) + 0.375) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2) + (-35 * R_z[2] ** 5 / (2 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) + 25 * R_z[2] ** 3 / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2 - 15 * R_z[2] / (2 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)]
    #J5
    J5V[0],J5V[1],J5V[2] = [J5 * -6 * R_z[0] * (63 * R_z[2] ** 5 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) - 35 * R_z[2] ** 3 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2)) + 15 * R_z[2] / (8 * sqrt(R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4 + (-315 * R_z[0] * R_z[2] ** 5 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)) + 105 * R_z[0] * R_z[2] ** 3 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) - 15 * R_z[0] * R_z[2] / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3,
                            J5 * -6 * R_z[1] * (63 * R_z[2] ** 5 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) - 35 * R_z[2] ** 3 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2)) + 15 * R_z[2] / (8 * sqrt(R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4 + (-315 * R_z[1] * R_z[2] ** 5 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)) + 105 * R_z[1] * R_z[2] ** 3 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) - 15 * R_z[1] * R_z[2] / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3,
                            J5 * -6 * R_z[2] * (63 * R_z[2] ** 5 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) - 35 * R_z[2] ** 3 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2)) + 15 * R_z[2] / (8 * sqrt(R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4 + (-315 * R_z[2] ** 6 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)) + 525 * R_z[2] ** 4 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) - 225 * R_z[2] ** 2 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2)) + 15 / (8 * sqrt(R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3]
    #J6
    J6V[0],J6V[1],J6V[2] = [J6 * -7 * R_z[0] * (231 * R_z[2] ** 6 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) - 315 * R_z[2] ** 4 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) + 105 * R_z[2] ** 2 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2)) - 0.3125) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (9 / 2) + (-693 * R_z[0] * R_z[2] ** 6 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4) + 315 * R_z[0] * R_z[2] ** 4 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) - 105 * R_z[0] * R_z[2] ** 2 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2)) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2),
                            J6 * -7 * R_z[1] * (231 * R_z[2] ** 6 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) - 315 * R_z[2] ** 4 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) + 105 * R_z[2] ** 2 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2)) - 0.3125) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (9 / 2) + (-693 * R_z[1] * R_z[2] ** 6 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4) + 315 * R_z[1] * R_z[2] ** 4 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) - 105 * R_z[1] * R_z[2] ** 2 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2)) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2),
                            J6 * -7 * R_z[2] * (231 * R_z[2] ** 6 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) - 315 * R_z[2] ** 4 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) + 105 * R_z[2] ** 2 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2)) - 0.3125) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (9 / 2) + (-693 * R_z[2] ** 7 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4) + 1323 * R_z[2] ** 5 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) - 735 * R_z[2] ** 3 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) + 105 * R_z[2] / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)]
    #J7
    J7V[0],J7V[1],J7V[2] = [J7 * -8 * R_z[0] * (429 * R_z[2] ** 7 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)) - 693 * R_z[2] ** 5 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) + 315 * R_z[2] ** 3 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2)) - 35 * R_z[2] / (16 * sqrt(R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 5 + (-3003 * R_z[0] * R_z[2] ** 7 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (9 / 2)) + 3465 * R_z[0] * R_z[2] ** 5 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)) - 945 * R_z[0] * R_z[2] ** 3 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) + 35 * R_z[0] * R_z[2] / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4,
                            J7 * -8 * R_z[1] * (429 * R_z[2] ** 7 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)) - 693 * R_z[2] ** 5 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) + 315 * R_z[2] ** 3 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2)) - 35 * R_z[2] / (16 * sqrt(R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 5 + (-3003 * R_z[1] * R_z[2] ** 7 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (9 / 2)) + 3465 * R_z[1] * R_z[2] ** 5 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)) - 945 * R_z[1] * R_z[2] ** 3 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) + 35 * R_z[1] * R_z[2] / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4,
                            J7 * -8 * R_z[2] * (429 * R_z[2] ** 7 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)) - 693 * R_z[2] ** 5 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) + 315 * R_z[2] ** 3 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2)) - 35 * R_z[2] / (16 * sqrt(R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 5 + (-3003 * R_z[2] ** 8 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (9 / 2)) + 1617 * R_z[2] ** 6 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (7 / 2)) - 2205 * R_z[2] ** 4 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (5 / 2)) + 245 * R_z[2] ** 2 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (3 / 2)) - 35 / (16 * sqrt(R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4]
    #J8
    J8V[0],J8V[1],J8V[2] = [J8 * -9 * R_z[0] * (6435 * R_z[2] ** 8 / (128 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4) - 3003 * R_z[2] ** 6 / (32 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) + 3465 * R_z[2] ** 4 / (64 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) - 315 * R_z[2] ** 2 / (32 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2)) + 0.2734375) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (11 / 2) + (-6435 * R_z[0] * R_z[2] ** 8 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 5) + 9009 *R_z[0] * R_z[2] ** 6 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4) - 3465 * R_z[0] *R_z[2] ** 4 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) + 315 * R_z[0] * R_z[2] ** 2 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2)) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (9 / 2),
                            J8 * -9 * R_z[1] * (6435 * R_z[2] ** 8 / (128 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4) - 3003 * R_z[2] ** 6 / (32 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) + 3465 * R_z[2] ** 4 / (64 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) - 315 * R_z[2] ** 2 / (32 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2)) + 0.2734375) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (11 / 2) + (-6435 * R_z[1] * R_z[2] ** 8 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 5) + 9009 *R_z[1] * R_z[2] ** 6 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4) - 3465 * R_z[1] *R_z[2] ** 4 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) + 315 * R_z[1] * R_z[2] ** 2 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2)) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (9 / 2),
                            J8 * -9 * R_z[2] * (6435 * R_z[2] ** 8 / (128 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4) - 3003 * R_z[2] ** 6 / (32 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) + 3465 * R_z[2] ** 4 / (64 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) - 315 * R_z[2] ** 2 / (32 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2)) + 0.2734375) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (11 / 2) + (-6435 * R_z[2] ** 9 / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 5) + 3861 * R_z[2] ** 7 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 4) - 6237 * R_z[2] ** 5 / (8 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 3) + 945 * R_z[2] ** 3 / (4 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** 2) - 315 * R_z[2] / (16 * (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2))) / (R_z[0] ** 2 + R_z[1] ** 2 + R_z[2] ** 2) ** (9 / 2)]

    zp[3:6] = R_.T@(J2V+J3V-J4V-J5V-J6V-J7V-J8V) + R_.T@((-(mu/d**2)*(R_z/d))) - R_.T@(R_pp@z1)-2*R_.T@(R_p@z2)  #EDM con MEJORAS

    return zp

#---------------------------------------------------------------------------------------------------------------------
            #vector de tiempo
v_t = sp.linspace(0, dT, len(t))
            #odeint
z_ode = odeint(satelite, z0, v_t)
xode,yode,zode,xodev,yodev,zodev = [z_ode[: ,0], z_ode[: ,1], z_ode[: ,2], z_ode[:,3], z_ode[:,4], z_ode[:,5]]

#Imprimir Diferencia en KM
x_realf,y_realf,z_realf,xo_final,yo_final,zo_final = [vf_real[0],vf_real[1],vf_real[2],xodev[-1],yodev[-1],zodev[-1]]
diferencia = ((sp.sqrt((xo_final-x_realf)**2 + (yo_final-y_realf)**2 + (zo_final-z_realf)**2))/1000)
print (diferencia,"km")

    #-----------------------      Pasar a archivo de salida en formato ".PRED"       -------------------------

f_out = fname.replace(".EOF", ".PRED")

with open(f_out, 'w') as fout:

    fout.write('<?xml version="1.0" ?>\n')
    fout.write('<Earth_Explorer_File>\n')
    fout.write('<Data_Block type="xml">\n')
    fout.write(f'<List_of_OSVs count="{len(t)}">\n')

    for i in range(len(t)):
        fout.write('<OSV>\n')
        fout.write(f'<UTC>UTC=2020-07-23T22:59:42.000000</UTC>\n')  #no influye para el valor obtenido
        #X,Y,Z,VX,Y,VZ
        fout.write(f'<X unit="m">{xode[i]}</X>\n')
        fout.write(f'<Y unit="m">{yode[i]}</Y>\n')
        fout.write(f'<Z unit="m">{zode[i]}</Z>\n')
        fout.write(f'<VX unit="m/s">{xodev[i]}</VX>\n')
        fout.write(f'<VY unit="m/s">{yodev[i]}</VY>\n')
        fout.write(f'<VZ unit="m/s">{zodev[i]}</VZ>\n')

        #fout.write(f'<Quality>NOMINAL</Quality>\n')
        fout.write('</OSV>\n')

    fout.write('</List_of_OSVs>\n')
    fout.write('</Data_Block>\n')
    fout.write('</Earth_Explorer_File>')